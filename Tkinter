import tkinter as tk
# Importation de la bibliothèque Tkinter, qui permet de créer des interfaces graphiques (GUI) en Python.

# Créer la fenêtre principale
root = tk.Tk()
# On crée une instance de la classe Tk(), qui représente la fenêtre principale de l'application.
root.title("Exemple Tkinter")
# On définit le titre de la fenêtre principale, qui apparaîtra dans la barre de titre.
root.geometry("400x300")
# On fixe la taille de la fenêtre à 400 pixels de largeur et 300 pixels de hauteur.

# Ajouter des widgets
label = tk.Label(root, text="Bonjour, Tkinter !")
# Création d'un widget Label (étiquette) pour afficher du texte. 
# Le paramètre `text` contient le texte à afficher et `root` indique que ce widget appartient à la fenêtre principale.
label.pack()
# La méthode `pack()` place le widget dans la fenêtre de façon automatique (centrée et empilée verticalement).

entry = tk.Entry(root)
# Création d'un widget Entry, qui permet à l'utilisateur de saisir du texte.
# Ce champ de saisie appartient également à la fenêtre principale (`root`).
entry.pack()
# On utilise `pack()` pour positionner le champ de saisie sous le label.

# Fonction pour afficher le texte saisi
def afficher_texte():
    # Définition d'une fonction qui sera appelée lorsqu'on clique sur le bouton.
    # Cette fonction récupère le texte saisi dans le champ `entry` et l'affiche dans la console.
    print("Texte entré :", entry.get())
    # La méthode `entry.get()` retourne le contenu du champ de saisie.

button = tk.Button(root, text="Afficher le texte", command=afficher_texte)
# Création d'un widget Button (bouton). 
# Le paramètre `text` définit le texte affiché sur le bouton.
# Le paramètre `command` indique que la fonction `afficher_texte` doit être exécutée lorsqu'on clique sur le bouton.
button.pack()
# La méthode `pack()` positionne le bouton sous le champ de saisie.

# Lancer la boucle principale
root.mainloop()
# La méthode `mainloop()` démarre la boucle principale de l'application Tkinter.
# Cette boucle écoute les événements (clics, saisies, etc.) et met à jour l'interface en conséquence.
# Sans cette ligne, la fenêtre ne s'afficherait pas.

=============================== Principal fonctionnalité

import tkinter as tk
import random
from tkinter import messagebox

# Créer la fenêtre principale
root = tk.Tk()
root.title("Jeu : Attrape le carré")
root.geometry("600x400")
# Fixe les dimensions de la fenêtre

# Variables globales pour gérer le score et le temps restant
score = 0
temps_restant = 30  # Le jeu dure 30 secondes

# Canvas pour dessiner le carré (aire de jeu)
canvas = tk.Canvas(root, width=600, height=300, bg="lightblue")
canvas.pack()
# Un canvas est utilisé pour dessiner des formes comme des carrés, des cercles, etc.

# Zone d'informations
info_frame = tk.Frame(root)
info_frame.pack(pady=10)
# Un Frame permet de regrouper plusieurs widgets pour les organiser.

# Widget d'affichage du score
score_label = tk.Label(info_frame, text=f"Score : {score}", font=("Helvetica", 14))
score_label.pack(side="left", padx=20)
# Utilisation d'un Label pour afficher le score

# Widget d'affichage du temps restant
temps_label = tk.Label(info_frame, text=f"Temps restant : {temps_restant}s", font=("Helvetica", 14))
temps_label.pack(side="right", padx=20)

# Fonction pour générer un carré aléatoire
def generer_carre():
    canvas.delete("all")  # Supprime tout ce qui est sur le canvas
    x1 = random.randint(50, 550)
    y1 = random.randint(50, 250)
    x2 = x1 + 50
    y2 = y1 + 50
    # Génère des coordonnées aléatoires pour un carré
    canvas.create_rectangle(x1, y1, x2, y2, fill="red", tags="carre")
    # Dessine un carré rouge sur le canvas avec le tag "carre"

# Fonction appelée lorsqu'on clique sur le carré
def cliquer_sur_carre(event):
    global score
    # Vérifie si l'utilisateur a cliqué sur un objet avec le tag "carre"
    item = canvas.find_withtag("current")
    if "carre" in canvas.gettags(item):
        score += 1  # Augmente le score
        score_label.config(text=f"Score : {score}")
        generer_carre()  # Génère un nouveau carré

# Associe un clic gauche sur le canvas à la fonction `cliquer_sur_carre`
canvas.bind("<Button-1>", cliquer_sur_carre)

# Fonction pour gérer le compte à rebours
def mise_a_jour_temps():
    global temps_restant
    if temps_restant > 0:
        temps_restant -= 1  # Réduit le temps restant
        temps_label.config(text=f"Temps restant : {temps_restant}s")
        root.after(1000, mise_a_jour_temps)  # Appelle cette fonction toutes les secondes
    else:
        fin_du_jeu()  # Termine le jeu si le temps est écoulé

# Fonction pour afficher la fin du jeu
def fin_du_jeu():
    canvas.delete("all")  # Supprime tout sur le canvas
    messagebox.showinfo("Fin du jeu", f"Temps écoulé ! Votre score final est : {score}")
    # Affiche une boîte de dialogue avec le score final
    reset_jeu()

# Fonction pour réinitialiser le jeu
def reset_jeu():
    global score, temps_restant
    score = 0
    temps_restant = 30
    score_label.config(text=f"Score : {score}")
    temps_label.config(text=f"Temps restant : {temps_restant}s")
    generer_carre()  # Génère un premier carré
    mise_a_jour_temps()  # Redémarre le compte à rebours

# Bouton pour redémarrer le jeu
reset_button = tk.Button(root, text="Redémarrer", font=("Helvetica", 14), command=reset_jeu)
reset_button.pack(pady=10)
# Un bouton pour redémarrer le jeu manuellement

# Lancer le jeu
generer_carre()  # Génère un premier carré
mise_a_jour_temps()  # Lance le compte à rebours
root.mainloop()
# Démarre la boucle principale de l'interface graphique

